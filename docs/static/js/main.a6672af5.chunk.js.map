{"version":3,"sources":["service/api.js","images/Rick-and-Morty-logo.png","components/Header.js","components/CharacterCard.js","components/CharacterList.js","components/CharacterDetail.js","components/Filters.js","components/App.js","index.js"],"names":["fetch","then","response","json","data","results","Header","src","logo","alt","title","CharacterCard","props","to","id","image","name","species","CharacterList","characterItems","characters","map","character","CharacterDetail","status","origin","episode","Filters","htmlFor","type","placeholder","onChange","event","inputValue","target","value","handleFilter","App","useState","setCharacters","filterText","setFilterText","useEffect","api","filteredCharacters","filter","toLowerCase","includes","className","exact","path","component","routeProductId","parseInt","match","params","characterId","clickedCharacter","find","product","productId","undefined","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAYe,EAVQ,WACrB,OAAOA,MAHQ,8CAIZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAEL,OAAOA,EAAKC,YCPH,MAA0B,gDCa1BC,EAVA,WACb,OACE,iCACE,8BACE,qBAAKC,IAAKC,EAAMC,IAAI,gCAAgCC,MAAM,uCCoBnDC,EAvBO,SAACC,GACrB,OACE,cAAC,IAAD,CAAMC,GAAE,4BAAuBD,EAAME,IAAMJ,MAAO,+BAAlD,SACE,oCACE,qBACEH,IAAKK,EAAMG,MACXN,IAAG,mBAAcG,EAAMI,MACvBN,MAAK,mBAAcE,EAAMI,QAE3B,6BAAKJ,EAAMI,OACX,4BAAIJ,EAAMK,gBCoBHC,EA9BO,SAACN,GAErB,IAAMO,EAAiBP,EAAMQ,WAAWC,KAAI,SAACC,GAC3C,OACE,6BACE,cAAC,EAAD,CACER,GAAIQ,EAAUR,GACdE,KAAMM,EAAUN,KAChBD,MAAOO,EAAUP,MACjBE,QAASK,EAAUL,WALdK,EAAUR,OAWvB,OACE,kCACE,6BAAKK,OCUII,EA5BS,SAACX,GACvB,OACE,+BACI,oCACE,8BACE,qBAAKL,IAAKK,EAAMG,MAAON,IAAG,mBAAcG,EAAMI,MAAQN,MAAK,mBAAcE,EAAMI,UAEjF,gCACE,6BAAKJ,EAAMI,OACX,4BAAIJ,EAAMY,SACV,4BAAIZ,EAAMK,UACV,4BAAIL,EAAMa,SACV,4BAAIb,EAAMc,mBCYPC,G,MAxBC,SAACf,GAUf,OACE,kCACE,iCACE,uBAAOgB,QAAQ,cACf,uBAAOC,KAAK,OAAOf,GAAG,YAAYE,KAAK,YAAYc,YAAY,wBAAwBC,SAZxE,SAACC,GAGpB,IAAMC,EAAaD,EAAME,OAAOC,MAEhCvB,EAAMwB,aAAaH,aCqFRI,EArFH,WAAM,MAGoBC,mBAAS,IAH7B,mBAGTlB,EAHS,KAGGmB,EAHH,OAKoBD,mBAAS,IAL7B,mBAKTE,EALS,KAKGC,EALH,KAQhBC,qBACE,WACEC,IAAqB1C,MAAK,SAACG,GACzBmC,EAAcnC,QAIlB,IAIF,IAKMwC,EAAqBxB,EAAWyB,QAAO,SAACvB,GAE5C,OADsBA,EAAUN,KACX8B,cAAcC,SAASP,EAAWM,kBA+BzD,OACE,qBAAKE,UAAU,MAAf,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,UACE,cAAC,EAAD,IACA,iCACE,cAAC,EAAD,CAASd,aA5CE,SAACH,GACpBQ,EAAcR,MA4CN,cAAC,EAAD,CAAeb,WAAYwB,UAG/B,cAAC,IAAD,CAAOM,KAAK,iCAAiCC,UArC9B,SAACvC,GAEpB,IAAMwC,EAAiBC,SAASzC,EAAM0C,MAAMC,OAAOC,aAC7CC,EAAmBrC,EAAWsC,MAAK,SAACC,GACxC,IAAMC,EAAYD,EAAQ7C,GAC1B,OAAOsC,IAAmBQ,KAG5B,YAAyBC,IAArBJ,EAEA,qCACA,cAAC,EAAD,IACA,cAAC,EAAD,CACE1C,MAAO0C,EAAiB1C,MACxBC,KAAMyC,EAAiBzC,KACvBQ,OAAQiC,EAAiBjC,OACzBP,QAASwC,EAAiBxC,QAC1BQ,OAAQgC,EAAiBhC,OAAOT,KAChCU,QAAS+B,EAAiB/B,QAAQoC,YAK/B,qGCzDbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.a6672af5.chunk.js","sourcesContent":["const ENDPOINT = \"https://rickandmortyapi.com/api/character/\";\r\n\r\nconst getDataFromApi = () => {\r\n  return fetch(ENDPOINT)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      // returns an array of 20 characters\r\n      return data.results;\r\n    });\r\n};\r\n\r\n// Exporting as an object in case we add more functions in the future\r\nexport default {\r\n  getDataFromApi: getDataFromApi,\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Rick-and-Morty-logo.de13d484.png\";","import React from \"react\"\r\nimport logo from \"../images/Rick-and-Morty-logo.png\"\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div>\r\n        <img src={logo} alt=\"Rick and Morty tv series logo\" title=\"Rick and Morty tv series logo\"/>\r\n      </div>\r\n    </header>\r\n  )\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CharacterCard = (props) => {\r\n  return (\r\n    <Link to={`/character-detail/${props.id}`} title={\"See this character's details\"}>\r\n      <article>\r\n        <img\r\n          src={props.image}\r\n          alt={`Image of ${props.name}`}\r\n          title={`Image of ${props.name}`}\r\n        />\r\n        <h2>{props.name}</h2>\r\n        <p>{props.species}</p>\r\n      </article>\r\n    </Link>\r\n  );\r\n};\r\n\r\nCharacterCard.propTypes = {\r\n  id: PropTypes.number,\r\n  name: PropTypes.string,\r\n  image: PropTypes.string,\r\n  species: PropTypes.string,\r\n};\r\n\r\nexport default CharacterCard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CharacterCard from \"./CharacterCard\";\r\n\r\nconst CharacterList = (props) => {\r\n  //MAP\r\n  const characterItems = props.characters.map((character) => {\r\n    return (\r\n      <li key={character.id}>\r\n        <CharacterCard\r\n          id={character.id}\r\n          name={character.name}\r\n          image={character.image}\r\n          species={character.species}\r\n        />\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <section>\r\n      <ul>{characterItems}</ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nCharacterList.propTypes = {\r\n  character: PropTypes.array,\r\n  id: PropTypes.number,\r\n  name: PropTypes.string,\r\n  image: PropTypes.string,\r\n  species: PropTypes.string,\r\n};\r\n\r\nexport default CharacterList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CharacterDetail = (props) => {\r\n  return (\r\n    <main>\r\n        <article>\r\n          <div>\r\n            <img src={props.image} alt={`Image of ${props.name}`} title={`Image of ${props.name}`}/>\r\n          </div>\r\n          <div>\r\n            <h2>{props.name}</h2>\r\n            <p>{props.status}</p>\r\n            <p>{props.species}</p>\r\n            <p>{props.origin}</p>\r\n            <p>{props.episode}</p>\r\n          </div>\r\n        </article>\r\n    </main>\r\n  );\r\n};\r\n\r\nCharacterDetail.propTypes = {\r\n  image: PropTypes.string,\r\n  name: PropTypes.string,\r\n  status: PropTypes.string,\r\n  species: PropTypes.string,\r\n  origin: PropTypes.string,\r\n  episode: PropTypes.number,\r\n};\r\n\r\nexport default CharacterDetail;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\"\r\n\r\nconst Filters = (props) => {\r\n  //EVENT\r\n  const handleFilter = (event) => {\r\n    // console.log(\"Entro en event\");\r\n    // console.log(event.target);\r\n    const inputValue = event.target.value;\r\n    // console.log(filterText);\r\n    props.handleFilter(inputValue);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <form>\r\n        <label htmlFor=\"character\"></label>\r\n        <input type=\"text\" id=\"character\" name=\"character\" placeholder=\"Type a character name\" onChange={handleFilter}></input>\r\n      </form>\r\n    </section>\r\n  )\r\n};\r\n\r\nFilters.propTypes = {\r\n  handleFilter: PropTypes.func,\r\n};\r\n\r\nexport default Filters;\r\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Switch } from \"react-router-dom\";\nimport api from \"../service/api\";\nimport Header from \"./Header\";\nimport CharacterList from \"./CharacterList\";\nimport CharacterDetail from \"./CharacterDetail\";\nimport \"../stylesheets/App.scss\";\nimport Filters from \"./Filters\";\n\nconst App = () => {\n\n  // STATE\n  const [characters, setCharacters] = useState([]);\n  //Defines a new state for the text written in the input\n  const [filterText, setFilterText] = useState(\"\");\n\n  //API\n  useEffect(\n    () => {\n      api.getDataFromApi().then((data) => {\n        setCharacters(data);\n      });\n    },\n    //Empty array so that the first useEffect parameter gets executed only once\n    []\n  );\n\n  //EVENT\n  const handleFilter = (inputValue) => {\n    setFilterText(inputValue);\n  };\n\n  //FILTER\n  const filteredCharacters = characters.filter((character) => {\n    const characterName = character.name;\n    return characterName.toLowerCase().includes(filterText.toLowerCase());\n  });\n\n  //RENDER DETAIL\n  const renderDetail = (props) => {\n    //turning the routeProductId value into a number to compare it with the productId (number value type)\n    const routeProductId = parseInt(props.match.params.characterId);\n    const clickedCharacter = characters.find((product) => {\n      const productId = product.id;\n      return routeProductId === productId;\n    });\n    //renders the searched character if it finds it. Else, returns a not found message\n    if (clickedCharacter !== undefined) {\n      return (\n        <>\n        <Header />\n        <CharacterDetail\n          image={clickedCharacter.image}\n          name={clickedCharacter.name}\n          status={clickedCharacter.status}\n          species={clickedCharacter.species}\n          origin={clickedCharacter.origin.name}\n          episode={clickedCharacter.episode.length}\n        />\n        </>\n      );\n    } else {\n      return <p>No hay ningún personaje que coincida con la búsqueda.</p>;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Header />\n          <main>\n            <Filters handleFilter={handleFilter} />\n            <CharacterList characters={filteredCharacters} />\n          </main>\n        </Route>\n        <Route path=\"/character-detail/:characterId\" component={renderDetail} />\n      </Switch>\n    </div>\n  );\n};\n\nApp.propTypes = {\n  characters: PropTypes.array,\n  handleFilter: PropTypes.func,\n  renderDetail: PropTypes.func,\n  image: PropTypes.string,\n  name: PropTypes.string,\n  status: PropTypes.string,\n  species: PropTypes.string,\n  origin: PropTypes.string,\n  episode: PropTypes.number,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './stylesheets/index.scss';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}